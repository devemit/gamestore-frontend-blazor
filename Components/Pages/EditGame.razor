@page "/editgame"
@page "/editgame/{id:int}"
@rendermode InteractiveServer
@inject NavigationManager NavManager
@inject GamesClient GamesClient
@inject GenresClient GenresClient

<PageTitle>New Game</PageTitle>

<h3 class="mt-4">@title</h3>
@*
we bind the game model to the editform
we give it a name
name in label and name in inputtext needs to be same *@

@if (genres is null || game is null)
{
	<p><em>Loading...</em></p>
}
else
{
	<div class="row">
		<div class="col-md-4">
			<EditForm Model="@game" FormName="editGame" class="mt-4" OnValidSubmit="HandleSubmitAsync" Enhance>
				@* Enhance method added on form with static server side rendering allows us when we do changes to the form
			so only the changes we did to render, without Enhance everything renders *@
				<DataAnnotationsValidator />
				<ValidationSummary />
				<div class="mb-3">
					<label for="name" class="form-label">Name:</label>
					<InputText id="name" @bind-Value="game.Name" class="form-control" />
					<ValidationMessage For="() => game.Name" />
				</div>
				<div class="mb-3">
					<label for="genre" class="form-label">Genre:</label>
					<InputSelect id="genre" @bind-Value="game.GenreId" class="form-select">
						<option value="">Select a genre</option>
						@foreach (var genre in genres)
						{
							<option value="@genre.Id">@genre.Name</option>
						}
					</InputSelect>
					<ValidationMessage For="() => game.GenreId" />
				</div>
				<div class="mb-3">
					<label for="price" class="form-label">Price:</label>
					<InputNumber id="price" @bind-Value="game.Price" class="form-control" />
					<ValidationMessage For="() => game.Price" />
				</div>
				<div class="mb-3">
					<label for="releaseDate" class="form-label">Date:</label>
					<InputDate id="releaseDate" @bind-Value="game.ReleaseDate" class="form-control" />
					<ValidationMessage For="() => game.ReleaseDate" />
				</div>
				<button type="submit" class="btn btn-primary">Save</button>
				<a href="/" role="button" class="btn btn-secondary">Cancel</a>
			</EditForm>
		</div>
	</div>
}



@code {

	[Parameter]
	public int? Id { get; set; }

	// parameter so the form will knbow what are we doing
	[SupplyParameterFromForm]
	private GameDetails? game { get; set; }

	private Genre[]? genres;
	private string? title;
	protected override async Task OnParametersSetAsync()
	{
		if (game is not null) return;
		if (Id is not null)
		{
			game = await GamesClient.GetGameAsync(Id.Value);
			title = $"Edit {game.Name}";
		}
		else
		{
			game = new()
				{
					Name = string.Empty,
					ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow)
				};
			title = "Add New Game";
		}
	}

	protected override async Task OnInitializedAsync()
	{
		genres = await GenresClient.GetGenresAsync();
	}

	private async Task HandleSubmitAsync()
	{
		ArgumentNullException.ThrowIfNull(game);
		if (Id is null)
		{

			await GamesClient.AddGameAsync(game);
		}
		else
		{
			game.Id = Id.Value;
			await GamesClient.UpdateGameAsync(game);
		}
		NavManager.NavigateTo("/");
	}
}
